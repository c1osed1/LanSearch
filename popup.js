document.addEventListener('DOMContentLoaded', function() {
  const statusDiv = document.getElementById('status');
  const checkUpdateBtn = document.getElementById('checkUpdateBtn');
  const updateStatus = document.getElementById('updateStatus');
  const themeToggle = document.getElementById('themeToggle');
  const modalBypassToggle = document.getElementById('modalBypassToggle');
  const pcStylesToggle = document.getElementById('pcStylesToggle');
  const tableOptimizationToggle = document.getElementById('tableOptimizationToggle');
  const hideCheckboxesToggle = document.getElementById('hideCheckboxesToggle');
  const hideCommentsToggle = document.getElementById('hideCommentsToggle');
  const domainInfoToggle = document.getElementById('domainInfoToggle');
  
  
  let currentTheme = 'light';
  let themeApplied = false;
  
  
  function initTheme() {
    if (themeApplied) {
      setTheme(currentTheme);
      return;
    }
    
    try {
      
      const localTheme = localStorage.getItem('lanSearchTheme');
      if (localTheme) {
        currentTheme = localTheme;
        themeApplied = true;
        setTheme(localTheme);
        return;
      }
      
      
      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {
        chrome.storage.sync.get(['theme'], function(result) {
          try {
            currentTheme = result.theme || 'light';
            themeApplied = true;
            setTheme(currentTheme);
            
            try {
              localStorage.setItem('lanSearchTheme', currentTheme);
            } catch (e) {
              
            }
          } catch (e) {
            
            currentTheme = 'light';
            themeApplied = true;
            setTheme('light');
          }
        });
      } else {
        
        currentTheme = 'light';
        themeApplied = true;
        setTheme('light');
      }
    } catch (e) {
      
      currentTheme = 'light';
      themeApplied = true;
      setTheme('light');
    }
  }
  
  function setTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
    themeToggle.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    themeToggle.title = theme === 'dark' ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É';
  }
  
  function toggleTheme() {
    const currentThemeAttr = document.documentElement.getAttribute('data-theme') || 'light';
    const newTheme = currentThemeAttr === 'light' ? 'dark' : 'light';
    
    
    currentTheme = newTheme;
    
    setTheme(newTheme);
    
    
    try {
      localStorage.setItem('lanSearchTheme', newTheme);
    } catch (e) {
      
    }
    
    
    try {
      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {
        chrome.storage.sync.set({ theme: newTheme });
      }
    } catch (e) {
      
      console.log('Chrome storage not available, using localStorage only');
    }
  }
  
  
  initTheme();
  
  
  themeToggle.addEventListener('click', toggleTheme);
  
  
  let modalBypassEnabled = false;
  
  function initModalBypass() {
    try {
      
      const localBypass = localStorage.getItem('lanSearchModalBypass');
      if (localBypass !== null) {
        modalBypassEnabled = localBypass === 'true';
        setModalBypassState(modalBypassEnabled);
        return;
      }
      
      
      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {
        chrome.storage.sync.get(['modalBypass'], function(result) {
          try {
            modalBypassEnabled = result.modalBypass || false;
            setModalBypassState(modalBypassEnabled);
            
            try {
              localStorage.setItem('lanSearchModalBypass', modalBypassEnabled.toString());
            } catch (e) {
              
            }
          } catch (e) {
            
            modalBypassEnabled = false;
            setModalBypassState(false);
          }
        });
      } else {
        
        modalBypassEnabled = false;
        setModalBypassState(false);
      }
    } catch (e) {
      
      modalBypassEnabled = false;
      setModalBypassState(false);
    }
  }
  
  function setModalBypassState(enabled) {
    modalBypassToggle.textContent = enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    modalBypassToggle.style.background = enabled ? '#28a745' : '#dc3545';
    modalBypassToggle.title = enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –æ–±—Ö–æ–¥ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω' : '–í–∫–ª—é—á–∏—Ç—å –æ–±—Ö–æ–¥ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω';
  }
  
  function toggleModalBypass() {
    modalBypassEnabled = !modalBypassEnabled;
    
    setModalBypassState(modalBypassEnabled);
    
    
    try {
      localStorage.setItem('lanSearchModalBypass', modalBypassEnabled.toString());
    } catch (e) {
      
    }
    
    
    try {
      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {
        chrome.storage.sync.set({ modalBypass: modalBypassEnabled }, function() {
          console.log('Popup: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ chrome.storage:', modalBypassEnabled);
          
          
          chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
            if (tabs[0]) {
              chrome.scripting.executeScript({
                target: { tabId: tabs[0].id },
                func: () => {
                  if (window.lanSearchSyncModalBypass) {
                    window.lanSearchSyncModalBypass();
                  }
                }
              }).catch(err => {
                console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ:', err);
              });
            }
          });
        });
      }
    } catch (e) {
      
      console.log('Chrome storage not available, using localStorage only');
    }
  }
  
  
  initModalBypass();
  
  
  modalBypassToggle.addEventListener('click', toggleModalBypass);
  let pcStylesEnabled = false;
  let tableOptimizationEnabled = false;
  let hideCheckboxesEnabled = false;
  let hideCommentsEnabled = false;
  let domainInfoEnabled = false;
  function initPCStyles() {
    try {
      const localStyles = localStorage.getItem('lanSearchPCStyles');
      if (localStyles !== null) {
        pcStylesEnabled = localStyles === 'true';
        setPCStylesState(pcStylesEnabled);
        return;
      }
      
      
      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {
        chrome.storage.sync.get(['pcStyles'], function(result) {
          try {
            pcStylesEnabled = result.pcStyles || false;
            setPCStylesState(pcStylesEnabled);
            
            try {
              localStorage.setItem('lanSearchPCStyles', pcStylesEnabled.toString());
            } catch (e) {
              
            }
          } catch (e) {
            
            pcStylesEnabled = false;
            setPCStylesState(false);
          }
        });
      } else {
        
        pcStylesEnabled = false;
        setPCStylesState(false);
      }
    } catch (e) {
      
      pcStylesEnabled = false;
      setPCStylesState(false);
    }
  }
  
  function setPCStylesState(enabled) {
    pcStylesToggle.textContent = enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    pcStylesToggle.style.background = enabled ? '#28a745' : '#dc3545';
    pcStylesToggle.title = enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç –ü–ö' : '–í–∫–ª—é—á–∏—Ç—å —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç –ü–ö';
  }
  
  function togglePCStyles() {
    pcStylesEnabled = !pcStylesEnabled;
    
    setPCStylesState(pcStylesEnabled);
    
    
    try {
      localStorage.setItem('lanSearchPCStyles', pcStylesEnabled.toString());
    } catch (e) {
      
    }
    
    
    try {
      if (typeof chrome !== 'undefined' && chrome.storage && chrome.storage.sync) {
        chrome.storage.sync.set({ pcStyles: pcStylesEnabled }, function() {
          console.log('Popup: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –ü–ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ chrome.storage:', pcStylesEnabled);
          
          
          chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
            if (tabs[0]) {
              chrome.scripting.executeScript({
                target: { tabId: tabs[0].id },
                func: () => {
                  if (window.lanSearchSyncPCStyles) {
                    window.lanSearchSyncPCStyles();
                  }
                }
              }).catch(err => {
                console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏ –ü–ö –Ω–∞ –≤–∫–ª–∞–¥–∫–µ:', err);
              });
            }
          });
        });
      }
    } catch (e) {
      
      console.log('Chrome storage not available, using localStorage only');
    }
  }
  
  
  initPCStyles();
  
  
  pcStylesToggle.addEventListener('click', togglePCStyles);
  
  
  function initTableOptimization() {
    try {
      
      const localOptimization = localStorage.getItem('lanSearchTableOptimization');
      if (localOptimization !== null) {
        tableOptimizationEnabled = localOptimization === 'true';
        setTableOptimizationState(tableOptimizationEnabled);
        return;
      }
      
      
      chrome.storage.sync.get(['tableOptimization'], function(result) {
        if (result.tableOptimization !== undefined) {
          tableOptimizationEnabled = result.tableOptimization;
        } else {
          tableOptimizationEnabled = false;
        }
        setTableOptimizationState(tableOptimizationEnabled);
      });
    } catch (error) {
      console.error('Popup: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü:', error);
      tableOptimizationEnabled = false;
      setTableOptimizationState(false);
    }
  }
  
  function setTableOptimizationState(enabled) {
    tableOptimizationToggle.textContent = enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    tableOptimizationToggle.style.background = enabled ? '#28a745' : '#dc3545';
    tableOptimizationToggle.title = enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü' : '–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü';
  }
  
  function toggleTableOptimization() {
    tableOptimizationEnabled = !tableOptimizationEnabled;
    setTableOptimizationState(tableOptimizationEnabled);
    
    
    localStorage.setItem('lanSearchTableOptimization', tableOptimizationEnabled.toString());
    
    
    chrome.storage.sync.set({ tableOptimization: tableOptimizationEnabled }, function() {
      if (chrome.runtime.lastError) {
        console.error('Popup: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü:', chrome.runtime.lastError);
      }
    });
    
    
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      if (tabs[0]) {
        chrome.scripting.executeScript({
          target: { tabId: tabs[0].id },
          func: () => {
            if (window.lanSearchSyncTableOptimization) {
              window.lanSearchSyncTableOptimization();
            }
          }
        }).catch(err => {
          console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü:', err);
        });
      }
    });
  }
  
  
  initTableOptimization();
  
  
  tableOptimizationToggle.addEventListener('click', toggleTableOptimization);
  
  
  function initHideCheckboxes() {
    try {
      
      const localHideCheckboxes = localStorage.getItem('lanSearchHideCheckboxes');
      if (localHideCheckboxes !== null) {
        hideCheckboxesEnabled = localHideCheckboxes === 'true';
        setHideCheckboxesState(hideCheckboxesEnabled);
        return;
      }
      
      
      chrome.storage.sync.get(['hideCheckboxes'], function(result) {
        if (result.hideCheckboxes !== undefined) {
          hideCheckboxesEnabled = result.hideCheckboxes;
        } else {
          hideCheckboxesEnabled = false;
        }
        setHideCheckboxesState(hideCheckboxesEnabled);
      });
    } catch (error) {
      console.error('Popup: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤:', error);
      hideCheckboxesEnabled = false;
      setHideCheckboxesState(false);
    }
  }
  
  function setHideCheckboxesState(enabled) {
    hideCheckboxesToggle.textContent = enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    hideCheckboxesToggle.style.background = enabled ? '#28a745' : '#dc3545';
    hideCheckboxesToggle.title = enabled ? '–ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫–±–æ–∫—Å—ã –ü–ö' : '–°–∫—Ä—ã—Ç—å —á–µ–∫–±–æ–∫—Å—ã –ü–ö';
  }
  
  function toggleHideCheckboxes() {
    hideCheckboxesEnabled = !hideCheckboxesEnabled;
    setHideCheckboxesState(hideCheckboxesEnabled);
    
    
    localStorage.setItem('lanSearchHideCheckboxes', hideCheckboxesEnabled.toString());
    
    
    chrome.storage.sync.set({ hideCheckboxes: hideCheckboxesEnabled }, function() {
      if (chrome.runtime.lastError) {
        console.error('Popup: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫—Ä—ã—Ç–∏—è —á–µ–∫–±–æ–∫—Å–æ–≤:', chrome.runtime.lastError);
      }
    });
    
    
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      if (tabs[0]) {
        chrome.scripting.executeScript({
          target: { tabId: tabs[0].id },
          func: () => {
            if (window.lanSearchSyncHideCheckboxes) {
              window.lanSearchSyncHideCheckboxes();
            }
          }
        }).catch(err => {
          console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫—Ä—ã—Ç–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤:', err);
        });
      }
    });
  }
  
  
  initHideCheckboxes();
  
  
  hideCheckboxesToggle.addEventListener('click', toggleHideCheckboxes);
  
  
  function initHideComments() {
    try {
      
      const localHideComments = localStorage.getItem('lanSearchHideComments');
      if (localHideComments !== null) {
        hideCommentsEnabled = localHideComments === 'true';
        setHideCommentsState(hideCommentsEnabled);
        return;
      }
      
      
      chrome.storage.sync.get(['hideComments'], function(result) {
        if (result.hideComments !== undefined) {
          hideCommentsEnabled = result.hideComments;
        } else {
          hideCommentsEnabled = false;
        }
        setHideCommentsState(hideCommentsEnabled);
      });
    } catch (error) {
      console.error('Popup: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
      hideCommentsEnabled = false;
      setHideCommentsState(false);
    }
  }
  
  function setHideCommentsState(enabled) {
    hideCommentsToggle.textContent = enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    hideCommentsToggle.style.background = enabled ? '#28a745' : '#dc3545';
    hideCommentsToggle.title = enabled ? '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ü–ö' : '–°–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ü–ö';
  }
  
  function toggleHideComments() {
    hideCommentsEnabled = !hideCommentsEnabled;
    setHideCommentsState(hideCommentsEnabled);
    
    
    localStorage.setItem('lanSearchHideComments', hideCommentsEnabled.toString());
    
    
    chrome.storage.sync.set({ hideComments: hideCommentsEnabled }, function() {
      if (chrome.runtime.lastError) {
        console.error('Popup: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∫—Ä—ã—Ç–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', chrome.runtime.lastError);
      }
    });
    
    
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      if (tabs[0]) {
        chrome.scripting.executeScript({
          target: { tabId: tabs[0].id },
          func: () => {
            if (window.lanSearchSyncHideComments) {
              window.lanSearchSyncHideComments();
            }
          }
        }).catch(err => {
          console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫—Ä—ã—Ç–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
        });
      }
    });
  }
  
  
  initHideComments();
  
  
  hideCommentsToggle.addEventListener('click', toggleHideComments);
  
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –¥–æ–º–µ–Ω—É
  function initDomainInfo() {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
      const localDomainInfo = localStorage.getItem('lanSearchDomainInfo');
      if (localDomainInfo !== null) {
        domainInfoEnabled = localDomainInfo === 'true';
        setDomainInfoState(domainInfoEnabled);
      } else {
        chrome.storage.sync.get(['domainInfo'], function(result) {
          if (result.domainInfo !== undefined) {
            domainInfoEnabled = result.domainInfo;
          } else {
            domainInfoEnabled = false;
          }
          setDomainInfoState(domainInfoEnabled);
        });
      }
      
    } catch (error) {
      console.error('Popup: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–æ–º–µ–Ω—É:', error);
      domainInfoEnabled = false;
      setDomainInfoState(false);
    }
  }
  
  function setDomainInfoState(enabled) {
    domainInfoToggle.textContent = enabled ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω';
    domainInfoToggle.style.background = enabled ? '#28a745' : '#dc3545';
    domainInfoToggle.title = enabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–º–µ–Ω—É' : '–í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–º–µ–Ω—É';
  }
  
  function toggleDomainInfo() {
    domainInfoEnabled = !domainInfoEnabled;
    setDomainInfoState(domainInfoEnabled);
    
    localStorage.setItem('lanSearchDomainInfo', domainInfoEnabled.toString());
    
    chrome.storage.sync.set({ domainInfo: domainInfoEnabled }, function() {
      if (chrome.runtime.lastError) {
        console.error('Popup: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–æ–º–µ–Ω—É:', chrome.runtime.lastError);
      }
    });
    
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      if (tabs[0]) {
        chrome.scripting.executeScript({
          target: { tabId: tabs[0].id },
          func: () => {
            if (window.lanSearchSyncDomainInfo) {
              window.lanSearchSyncDomainInfo();
            }
          }
        }).catch(err => {
          console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ–º–µ–Ω—É:', err);
        });
      }
    });
  }
  
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initDomainInfo();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  domainInfoToggle.addEventListener('click', toggleDomainInfo);
  
  
  setTimeout(() => {
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      if (tabs[0]) {
        chrome.scripting.executeScript({
          target: { tabId: tabs[0].id },
          func: () => {
            if (window.lanSearchSyncModalBypass) {
              window.lanSearchSyncModalBypass();
            }
                    if (window.lanSearchSyncPCStyles) {
                      window.lanSearchSyncPCStyles();
                    }
                    if (window.lanSearchSyncTableOptimization) {
                      window.lanSearchSyncTableOptimization();
                    }
                    if (window.lanSearchSyncHideCheckboxes) {
                      window.lanSearchSyncHideCheckboxes();
                    }
                    if (window.lanSearchSyncHideComments) {
                      window.lanSearchSyncHideComments();
                    }
                    if (window.lanSearchSyncDomainInfo) {
                      window.lanSearchSyncDomainInfo();
            }
          }
        }).catch(err => {
          console.log('Popup: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup:', err);
        });
      }
    });
  }, 100);
  
  function showStatus(message, type) {
    if (statusDiv) {
      statusDiv.textContent = message;
      statusDiv.className = `status ${type}`;
      statusDiv.style.display = 'block';
    }
  }


  
  function getFallbackIcon(dataIcon) {
    if (!dataIcon) return 'üìÑ';

    
    const iconMap = {
      'dashboard': 'üìä',
      'partners': 'ü§ù',
      'help': '‚ùì',
      'cat_global_settings': '‚öôÔ∏è',
      'cat_deal_with_staff': 'üë•',
      'cat_deal_with_guests': 'üë§',
      'cat_games_accounts': 'üéÆ',
      'cat_process_control': 'üîß',
      'cat_advertising': 'üì¢',
      'cat_boss_tools': 'üëë',
      'cat_products': 'üõçÔ∏è',
      'cat_mails': 'üìß',
      'cat_more_modals': 'üîå',
      'cat_analytics': 'üìà',
      'cat_domain_teh_stat': 'üìä',
      'all_clubs_pc': 'üíª',
      'cat_guests': 'üë•',
      'cat_documents': 'üìã',
      'cat_statistics': 'üìä',
      'cat_lockers': 'üîí',
      'reservation': 'üìÖ',
      'messages': 'üí¨',
      'ticked_control': 'üé´',
      'global_config': '‚öôÔ∏è',
      'list_clubs': 'üè¢',
      'packets_type_PC': 'üíª',
      'client_is_version': 'üîó',
      'tariff': 'üí∞',
      'payments_config': 'üí≥',
      'list_expenses_income_param_dir': 'üìä',
      'list_working_shift_expenses_income': 'üí∞',
      'certificates_config': 'üéÅ',
      'config_temperature': 'üå°Ô∏è',
      'deleting_at_startup': 'üóëÔ∏è',
      'freeze_exclude_registry': 'üîí',
      'freeze_exclude': '‚ùÑÔ∏è',
      'freeze_config': '‚ùÑÔ∏è',
      'subscription': 'üí≥',
      'connection_sbp': 'üè¶',
      'terminals': 'üèß',
      'hosts_overrides': 'üåê',
      'tablets': 'üì±',
      'administrators': 'üë®‚Äçüíº',
      'global_menu': 'üîê',
      'messages_control': 'üîî',
      'alert4admins': 'üì¢',
      'ticked_config': 'üé´',
      'working_shift_calc_zp': 'üí∞',
      'guests_groups': 'üë•',
      'autobonuses_rules': 'üéÅ',
      'guests_search': 'üîç',
      'guests_visits_history': 'üìã',
      'temp_guests_log': 'üìù',
      'guests': 'üë§',
      'guests_log_balance': 'üí∞',
      'guests_log_food_sale': 'üçî',
      'guests_log_to_admin': 'üîó',
      'anketa_config': 'üìã',
      'refunds_log': '‚Ü©Ô∏è',
      'black_list_phone': 'üö´',
      'guests_lost_item': 'üîç',
      'cert_creator': 'üéÅ',
      'guests_notifications': 'üì¢',
      'loyality_report': 'üíé',
      'sound_notifs': 'üîä',
      'mlm_config': 'üåê',
      'mlm_activation_log': 'üîó',
      'mlm_reward_log': 'üí∞',
      'black_list_log': 'üö´',
      'guests_log_import': 'üì•',
      'acc_games': 'üéÆ',
      'acc_steam': 'üéÆ',
      'games_accounts_config': '‚öôÔ∏è',
      'acc_email_steam_guard': 'üìß',
      'logs_game_acc_request': 'üìã',
      'lack_of_accounts': '‚ö†Ô∏è',
      'launchers_accounts_unbound': 'üîó',
      'session_games_chart': 'üìä',
      'process_groups': 'üîß',
      'process_monitor': 'üëÅÔ∏è',
      'process_exclude': '‚úÖ',
      'process_kill': '‚ùå',
      'advertising': 'üì¢',
      'langame_news': 'üì∞',
      'advertising_mfu': 'üì±',
      'advertising_terminal': 'üèß',
      'shop_banners': 'üõçÔ∏è',
      'cashbox_director': 'üí∞',
      'reports_working_shift_week': 'üìä',
      'cashbox_analytics': 'üìà',
      'reports_working_shift': 'üìä',
      'report_food_expense': 'üçî',
      'refunds_requests': '‚Ü©Ô∏è',
      'terminals_encashments': 'üèß',
      'bonus_operations_log': 'üí∞',
      'all_operations_log': 'üìã',
      'products': 'üõçÔ∏è',
      'products_groups': 'üìÅ',
      'products_suppliers': 'üöö',
      'products_list': 'üìã',
      'products_orders': 'üì¶',
      'products_arrival': 'üì•',
      'products_invent': 'üìä',
      'products_invent_list': 'üìã',
      'products_writeoffs': 'üóëÔ∏è',
      'products_adjusted': 'üìã',
      'products_sales_by_stock_price': 'üí∞',
      'products_vending_filling': 'üè™',
      'products_auto_order': 'ü§ñ',
      'products_auto_order_requisites': 'üìã',
      'products_stock_logs': 'üìã',
      'products_settings': '‚öôÔ∏è',
      'email': 'üìß',
      'telegram': 'üì±',
      'monitor_ignore': 'üñ•Ô∏è',
      'pc_energy_saving_ignore': 'üí°',
      'club_schema': 'üó∫Ô∏è',
      'club_schema_admin': 'üó∫Ô∏è',
      'guests_phone_codes': 'üìû',
      'freenas_wrap': 'üíæ',
      'nicehash': '‚õèÔ∏è',
      'computers_rent': 'üíª',
      'booking_calc': 'üßÆ',
      'logs': 'üìã',
      'service_stop_analytic': '‚èπÔ∏è',
      'teh_PC': 'üîß',
      'tehstatus_analytic': 'üìä',
      'pc_block_analytic': 'üîì',
      'reservation_analytics': 'üìÖ',
      'log_balance_by_card': 'üí≥',
      'guests_log_report_problems': '‚ö†Ô∏è',
      'pc_conf_change_log': 'üîß',
      'loading': 'üìä',
      'temperature_control': 'üå°Ô∏è',
      'guests_visits': 'üìä',
      'bad_words': 'üö´',
      'admin_events': 'üë®‚Äçüíº',
      'analytics_average_session_duration': '‚è±Ô∏è',
      'analytics_sticky_factor': 'üìà',
      'analytics_rolling_retention': 'üìä',
      'analytics_new_guests': 'üë§',
      'analytics_balance_up': 'üí∞',
      'analitycs_profit': 'üí∞',
      'analytics_sessions_reg_to_sessions_full': 'üìä',
      'analytics_sessions_sum': 'üìä',
      'analytics_uniq_session_guests': 'üë•',
      'analytics_avg_balance_up': 'üí∞',
      'analytics_packet_used': 'üì¶',
      'analytics_average_session_duration_by_type': '‚è±Ô∏è',
      'analytics_balance_up_percent': 'üìä',
      'analytics_rezerv_type_percent': 'üìÖ',
      'analytics_depth_rezerv_time': '‚è∞',
      'analytics_arpu': 'üí∞',
      'analytics_frequency_of_visits': 'üìä',
      'analytics_qr_auth': 'üì±',
      'analytics_average_session_duration_visit': '‚è±Ô∏è',
      'analytics_change_pwd_before_session': 'üîê',
      'analytics_avg_output_pc': 'üíª',
      'analitycs_profit_refills': 'üí∞',
      'tariff_purchases': 'üí∞',
      'analytics_mlm_activations': 'üîó',
      'analytics_mlm_revenue': 'üí∞',
      'analytics_mlm_dashboard': 'üìä',
      'remote_access_log': 'üîó',
      'analytics_device_temperatures': 'üå°Ô∏è',
      'logs_map_club_auth': 'üîê',
      'call_services_analytics': 'üìû',
      'cp_transactions_info': 'üí≥',
      'refunds': '‚Ü©Ô∏è',
      'use_rights': 'üìã',
      'book_rights': 'üìã',
      'public_offer': 'üìÑ',
      'gpo_info': '‚ÑπÔ∏è',
      'gpo_vacancies': 'üíº',
      'gpo_help': '‚ùì',
      'gpo_privacy': 'üîí',
      'gpo_faq': '‚ùì',
      'gpo_price_list': 'üí∞',
      'loading_channel': 'üìä',
      'lockers_settings': 'üîí',
      'lockers_history': 'üìã'
    };

    return iconMap[dataIcon] || 'üìÑ';
  }

  
  function createTabItem(tab, isFavorite = false) {
    const tabItem = document.createElement('div');
    
    
    let tabStyle = `
      padding: 8px 12px;
      margin: 4px 0;
      background: ${isFavorite ? '#fff3cd' : '#f8f9fa'};
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      border: 1px solid ${isFavorite ? '#ffeaa7' : '#e9ecef'};
      transition: background-color 0.2s;
      display: flex;
      align-items: center;
      gap: 8px;
    `;
    
    if (isFavorite && tab.color) {
      
      const availableColors = [
        { name: '–ö—Ä–∞—Å–Ω—ã–π', value: '#ff6b6b', bg: 'rgba(255, 107, 107, 0.1)', border: 'rgba(255, 107, 107, 0.3)' },
        { name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', value: '#ffa726', bg: 'rgba(255, 167, 38, 0.1)', border: 'rgba(255, 167, 38, 0.3)' },
        { name: '–ñ–µ–ª—Ç—ã–π', value: '#ffd54f', bg: 'rgba(255, 213, 79, 0.1)', border: 'rgba(255, 213, 79, 0.3)' },
        { name: '–ó–µ–ª–µ–Ω—ã–π', value: '#66bb6a', bg: 'rgba(102, 187, 106, 0.1)', border: 'rgba(102, 187, 106, 0.3)' },
        { name: '–ì–æ–ª—É–±–æ–π', value: '#4fc3f7', bg: 'rgba(79, 195, 247, 0.1)', border: 'rgba(79, 195, 247, 0.3)' },
        { name: '–°–∏–Ω–∏–π', value: '#42a5f5', bg: 'rgba(66, 165, 245, 0.1)', border: 'rgba(66, 165, 245, 0.3)' },
        { name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', value: '#ab47bc', bg: 'rgba(171, 71, 188, 0.1)', border: 'rgba(171, 71, 188, 0.3)' },
        { name: '–†–æ–∑–æ–≤—ã–π', value: '#ec407a', bg: 'rgba(236, 64, 122, 0.1)', border: 'rgba(236, 64, 122, 0.3)' }
      ];
      
      const colorConfig = availableColors.find(c => c.value === tab.color);
      if (colorConfig) {
        tabStyle = `
          padding: 8px 12px;
          margin: 4px 0;
          background: ${colorConfig.bg};
          border-radius: 6px;
          cursor: pointer;
          font-size: 12px;
          border: 1px solid ${colorConfig.border};
          transition: background-color 0.2s;
          display: flex;
          align-items: center;
          gap: 8px;
        `;
      }
    }
    
    tabItem.style.cssText = tabStyle;

    tabItem.addEventListener('mouseenter', () => {
      if (isFavorite && tab.color) {
        const availableColors = [
          { name: '–ö—Ä–∞—Å–Ω—ã–π', value: '#ff6b6b', bg: 'rgba(255, 107, 107, 0.1)', border: 'rgba(255, 107, 107, 0.3)' },
          { name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', value: '#ffa726', bg: 'rgba(255, 167, 38, 0.1)', border: 'rgba(255, 167, 38, 0.3)' },
          { name: '–ñ–µ–ª—Ç—ã–π', value: '#ffd54f', bg: 'rgba(255, 213, 79, 0.1)', border: 'rgba(255, 213, 79, 0.3)' },
          { name: '–ó–µ–ª–µ–Ω—ã–π', value: '#66bb6a', bg: 'rgba(102, 187, 106, 0.1)', border: 'rgba(102, 187, 106, 0.3)' },
          { name: '–ì–æ–ª—É–±–æ–π', value: '#4fc3f7', bg: 'rgba(79, 195, 247, 0.1)', border: 'rgba(79, 195, 247, 0.3)' },
          { name: '–°–∏–Ω–∏–π', value: '#42a5f5', bg: 'rgba(66, 165, 245, 0.1)', border: 'rgba(66, 165, 245, 0.3)' },
          { name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', value: '#ab47bc', bg: 'rgba(171, 71, 188, 0.1)', border: 'rgba(171, 71, 188, 0.3)' },
          { name: '–†–æ–∑–æ–≤—ã–π', value: '#ec407a', bg: 'rgba(236, 64, 122, 0.1)', border: 'rgba(236, 64, 122, 0.3)' }
        ];
        
        const colorConfig = availableColors.find(c => c.value === tab.color);
        if (colorConfig) {
          tabItem.style.background = colorConfig.bg.replace('0.1', '0.2');
        } else {
          tabItem.style.background = '#ffeaa7';
        }
      } else {
        tabItem.style.background = isFavorite ? '#ffeaa7' : '#e9ecef';
      }
    });

    tabItem.addEventListener('mouseleave', () => {
      if (isFavorite && tab.color) {
        const availableColors = [
          { name: '–ö—Ä–∞—Å–Ω—ã–π', value: '#ff6b6b', bg: 'rgba(255, 107, 107, 0.1)', border: 'rgba(255, 107, 107, 0.3)' },
          { name: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', value: '#ffa726', bg: 'rgba(255, 167, 38, 0.1)', border: 'rgba(255, 167, 38, 0.3)' },
          { name: '–ñ–µ–ª—Ç—ã–π', value: '#ffd54f', bg: 'rgba(255, 213, 79, 0.1)', border: 'rgba(255, 213, 79, 0.3)' },
          { name: '–ó–µ–ª–µ–Ω—ã–π', value: '#66bb6a', bg: 'rgba(102, 187, 106, 0.1)', border: 'rgba(102, 187, 106, 0.3)' },
          { name: '–ì–æ–ª—É–±–æ–π', value: '#4fc3f7', bg: 'rgba(79, 195, 247, 0.1)', border: 'rgba(79, 195, 247, 0.3)' },
          { name: '–°–∏–Ω–∏–π', value: '#42a5f5', bg: 'rgba(66, 165, 245, 0.1)', border: 'rgba(66, 165, 245, 0.3)' },
          { name: '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', value: '#ab47bc', bg: 'rgba(171, 71, 188, 0.1)', border: 'rgba(171, 71, 188, 0.3)' },
          { name: '–†–æ–∑–æ–≤—ã–π', value: '#ec407a', bg: 'rgba(236, 64, 122, 0.1)', border: 'rgba(236, 64, 122, 0.3)' }
        ];
        
        const colorConfig = availableColors.find(c => c.value === tab.color);
        if (colorConfig) {
          tabItem.style.background = colorConfig.bg;
        } else {
          tabItem.style.background = '#fff3cd';
        }
      } else {
        tabItem.style.background = isFavorite ? '#fff3cd' : '#f8f9fa';
      }
    });

    tabItem.addEventListener('click', async () => {
      try {
        await chrome.tabs.create({ url: tab.href });
        window.close();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏:', error);
      }
    });

    
    if (tab.iconStyles) {
      const icon = document.createElement('span');
      icon.style.cssText = `
        min-width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-image: ${tab.iconStyles.backgroundImage || 'none'};
        background-size: ${tab.iconStyles.backgroundSize || 'contain'};
        background-position: ${tab.iconStyles.backgroundPosition || 'center'};
        background-repeat: ${tab.iconStyles.backgroundRepeat || 'no-repeat'};
        width: ${tab.iconStyles.width || '20px'};
        height: ${tab.iconStyles.height || '20px'};
      `;
      tabItem.appendChild(icon);
    } else if (tab.icon) {
      
      const icon = document.createElement('span');
      icon.textContent = getFallbackIcon(tab.icon);
      icon.style.cssText = `
        font-size: 16px;
        min-width: 20px;
        text-align: center;
      `;
      tabItem.appendChild(icon);
    }

    
    const textContainer = document.createElement('div');
    textContainer.style.cssText = `
      flex: 1;
      min-width: 0;
    `;

    const tabTitle = document.createElement('div');
    tabTitle.textContent = tab.title;
    tabTitle.style.cssText = `
      font-weight: 600;
      color: #333;
      margin-bottom: 2px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    `;

    const tabPath = document.createElement('div');
    tabPath.textContent = tab.href;
    tabPath.style.cssText = `
      font-size: 10px;
      color: #666;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    `;

    textContainer.appendChild(tabTitle);
    textContainer.appendChild(tabPath);
    tabItem.appendChild(textContainer);
    return tabItem;
  }

  
  async function displayRecentTabs() {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      
      if (!tab?.id) return;

      const url = new URL(tab.url);
      const hostname = url.hostname.toLowerCase();
      
      
      const domainCheck = await chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: (hostname) => {
          if (window.lanSearchIsSuitableDomain) {
            return window.lanSearchIsSuitableDomain(hostname);
          }
          
          return hostname.includes('langame') || hostname.includes('cls');
        },
        args: [hostname]
      });

      const isSuitable = domainCheck[0]?.result || false;
      
      
      if (!isSuitable) return;

      const result = await chrome.scripting.executeScript({
        target: { tabId: tab.id },
        func: () => {
          const recentTabs = window.lanSearchGetRecentTabs ? window.lanSearchGetRecentTabs() : [];
          const favoriteTabs = window.lanSearchGetFavoriteTabs ? window.lanSearchGetFavoriteTabs() : [];
          return { recentTabs, favoriteTabs };
        }
      });

      const { recentTabs, favoriteTabs } = result[0]?.result || { recentTabs: [], favoriteTabs: [] };
      
      if (recentTabs.length === 0 && favoriteTabs.length === 0) return;

      
      const recentTabsContainer = document.createElement('div');
      recentTabsContainer.style.cssText = `
        margin-top: 15px;
        padding-top: 15px;
        border-top: 1px solid #e0e0e0;
      `;

      
      if (favoriteTabs.length > 0) {
        const favoritesTitle = document.createElement('h4');
        favoritesTitle.textContent = ' –ò–∑–±—Ä–∞–Ω–Ω—ã–µ:';
        favoritesTitle.style.cssText = `
          margin: 15px 0 8px 0;
          font-size: 13px;
          color: #333;
          font-weight: 600;
        `;

        const favoritesList = document.createElement('div');
        favoritesList.style.cssText = `
          max-height: 120px;
          overflow-y: auto;
          margin-bottom: 10px;
        `;

        favoriteTabs.forEach(tab => {
          const tabItem = createTabItem(tab, true);
          favoritesList.appendChild(tabItem);
        });

        recentTabsContainer.appendChild(favoritesTitle);
        recentTabsContainer.appendChild(favoritesList);
      }

      
      if (recentTabs.length > 0) {
        const recentTitle = document.createElement('h4');
        recentTitle.textContent = '–ù–µ–¥–∞–≤–Ω–∏–µ:';
        recentTitle.style.cssText = `
          margin: 15px 0 8px 0;
          font-size: 13px;
          color: #333;
          font-weight: 600;
        `;

        const tabsList = document.createElement('div');
        tabsList.style.cssText = `
          max-height: 120px;
          overflow-y: auto;
        `;

        recentTabs.slice(0, 5).forEach(tab => {
          const tabItem = createTabItem(tab, false);
          tabsList.appendChild(tabItem);
        });

        recentTabsContainer.appendChild(recentTitle);
        recentTabsContainer.appendChild(tabsList);
      }

      
      const clearBtn = document.createElement('button');
      clearBtn.textContent = '–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é';
      clearBtn.style.cssText = `
        margin-top: 10px;
        padding: 6px 12px;
        background: #dc3545;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 12px;
      `;

      clearBtn.addEventListener('click', async () => {
        try {
          await chrome.scripting.executeScript({
            target: { tabId: tab.id },
            func: () => {
              localStorage.removeItem('lanSearchRecentTabs');
              localStorage.removeItem('lanSearchFavoriteTabs');
            }
          });
          recentTabsContainer.remove();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
        }
      });

      recentTabsContainer.appendChild(clearBtn);

      
      statusDiv.parentNode.insertBefore(recentTabsContainer, statusDiv.nextSibling);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫:', error);
    }
  }
  
  
  function extractVersionFromCommit(commitMessage) {
    
    const versionMatch = commitMessage.match(/(\d+\.\d+(?:\.\d+)?)/);
    return versionMatch ? versionMatch[1] : null;
  }

  
  function compareVersions(version1, version2) {
    if (!version1 || !version2) return 0;
    
    const v1Parts = version1.split('.').map(Number);
    const v2Parts = version2.split('.').map(Number);
    
    
    while (v1Parts.length < v2Parts.length) v1Parts.push(0);
    while (v2Parts.length < v1Parts.length) v2Parts.push(0);
    
    for (let i = 0; i < v1Parts.length; i++) {
      if (v1Parts[i] > v2Parts[i]) return 1;
      if (v1Parts[i] < v2Parts[i]) return -1;
    }
    
    return 0;
  }

  
  async function checkForUpdates() {
    try {
      checkUpdateBtn.disabled = true;
      checkUpdateBtn.textContent = '–ü—Ä–æ–≤–µ—Ä—è—é...';
      updateStatus.textContent = '–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...';
      
      
      const manifest = chrome.runtime.getManifest();
      const currentVersion = manifest.version;
      
      
      const response = await fetch('https://api.github.com/repos/c1osed1/LanSearch/commits?per_page=1');
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const commits = await response.json();
      
      if (commits.length === 0) {
        updateStatus.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–º–∏—Ç–∞—Ö';
        return;
      }
      
      const latestCommit = commits[0];
      const latestCommitSha = latestCommit.sha.substring(0, 7); 
      const commitDate = new Date(latestCommit.commit.author.date);
      const commitMessage = latestCommit.commit.message.split('\n')[0]; 
      const latestVersion = extractVersionFromCommit(commitMessage);
      
      
      const stored = await chrome.storage.local.get(['lastKnownCommit', 'lastUpdateCheck']);
      
      
      await chrome.storage.local.set({
        'lastKnownCommit': {
          sha: latestCommitSha,
          version: latestVersion,
          message: commitMessage
        },
        'lastUpdateCheck': new Date().toISOString()
      });
      
      
      const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
      };
      
      
      let hasNewVersion = false;
      let versionComparison = '';
      
      if (latestVersion) {
        
        const comparison = compareVersions(latestVersion, currentVersion);
        hasNewVersion = comparison > 0;
        
        if (comparison > 0) {
          versionComparison = `‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${latestVersion} (—É –≤–∞—Å ${currentVersion})`;
        } else if (comparison < 0) {
          versionComparison = `‚ÑπÔ∏è –£ –≤–∞—Å –±–æ–ª–µ–µ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion} (–Ω–∞ GitHub ${latestVersion})`;
        } else {
          versionComparison = `‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`;
        }
      } else {
        versionComparison = `‚ÑπÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –∫–æ–º–º–∏—Ç–∞`;
      }
      
      
      updateStatus.textContent = '';
      
      
      const infoContainer = document.createElement('div');
      infoContainer.style.cssText = 'margin-bottom: 12px; font-size: 11px; line-height: 1.4;';
      
      
      const lastCheckDiv = document.createElement('div');
      lastCheckDiv.style.cssText = 'margin-bottom: 6px;';
      const lastCheckStrong = document.createElement('strong');
      lastCheckStrong.textContent = '–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:';
      lastCheckDiv.appendChild(lastCheckStrong);
      lastCheckDiv.appendChild(document.createTextNode(` ${formatDate(new Date())}`));
      infoContainer.appendChild(lastCheckDiv);
      
      
      const lastUpdateDiv = document.createElement('div');
      lastUpdateDiv.style.cssText = 'margin-bottom: 6px;';
      const lastUpdateStrong = document.createElement('strong');
      lastUpdateStrong.textContent = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ GitHub:';
      lastUpdateDiv.appendChild(lastUpdateStrong);
      lastUpdateDiv.appendChild(document.createElement('br'));
      lastUpdateDiv.appendChild(document.createTextNode(`${formatDate(commitDate)} (${latestCommitSha})`));
      infoContainer.appendChild(lastUpdateDiv);
      
      
      const commitDiv = document.createElement('div');
      commitDiv.style.cssText = 'margin-bottom: 6px;';
      const commitStrong = document.createElement('strong');
      commitStrong.textContent = '–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:';
      commitDiv.appendChild(commitStrong);
      commitDiv.appendChild(document.createElement('br'));
      commitDiv.appendChild(document.createTextNode(commitMessage));
      infoContainer.appendChild(commitDiv);
      
      
      const versionDiv = document.createElement('div');
      versionDiv.style.cssText = 'margin-bottom: 8px; font-weight: 600;';
      versionDiv.textContent = versionComparison;
      infoContainer.appendChild(versionDiv);
      
      updateStatus.appendChild(infoContainer);
      
      
      const downloadBtn = document.createElement('button');
      downloadBtn.id = 'downloadUpdateBtn';
      downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
      downloadBtn.style.cssText = 'padding: 6px 12px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px; width: 100%;';
      updateStatus.appendChild(downloadBtn);
      
      
      setTimeout(() => {
        const downloadBtn = document.getElementById('downloadUpdateBtn');
        if (downloadBtn) {
          downloadBtn.addEventListener('click', () => {
            chrome.tabs.create({ url: 'https://github.com/c1osed1/LanSearch/archive/refs/heads/main.zip' });
          });
        }
      }, 100);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      
      updateStatus.textContent = '';
      
      
      const errorDiv = document.createElement('div');
      errorDiv.style.cssText = 'margin-bottom: 8px; color: #dc3545;';
      errorDiv.textContent = `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${error.message}`;
      updateStatus.appendChild(errorDiv);
      
      
      const downloadBtn = document.createElement('button');
      downloadBtn.id = 'downloadUpdateBtn';
      downloadBtn.textContent = '–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ';
      downloadBtn.style.cssText = 'padding: 6px 12px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 11px; width: 100%;';
      updateStatus.appendChild(downloadBtn);
      
      setTimeout(() => {
        const downloadBtn = document.getElementById('downloadUpdateBtn');
        if (downloadBtn) {
          downloadBtn.addEventListener('click', () => {
            chrome.tabs.create({ url: 'https://github.com/c1osed1/LanSearch/archive/refs/heads/main.zip' });
          });
        }
      }, 100);
    } finally {
      checkUpdateBtn.disabled = false;
      checkUpdateBtn.textContent = '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å';
    }
  }
  
  
  checkUpdateBtn.addEventListener('click', checkForUpdates);
  

  
  
  
  displayRecentTabs();
  
  
  checkForUpdates();
}); 